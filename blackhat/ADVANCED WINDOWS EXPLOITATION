ADVANCED WINDOWS EXPLOITATION

https://www.blackhat.com/us-18/training/schedule/#advanced-windows-exploitation-9834

Writing exploits on modern Windows based platforms over the years has become a complex dance of 
memory manipulation to circumvention of modern mitigations Microsoft has put in place.
Offensive Security's Advanced Windows Exploitation Techniques (AWE) challenges you to develop creative solutions that work in today's 
increasingly difficult exploitation environment.

Covering techniques ranging from precision heap spraying, to DEP and ASLR bypass, 
real-world 64-bit kernel exploitation, and EMET bypasses, in a hands-on lab focused environment. 
AWE makes a point of introducing a concept and then allowing you to work through a case study applying what you learned, 
with multiple instructors on hand for help with any problems. The case studies covered include vulnerabilities discovered by 
our research team or exploits written by Offensive Security.

Topics covered include:

NX/ASLR Bypass - Using different techniques to bypass Data Execution Prevention and Address Space Layout Randomization protection mechanisms on modern operating systems.
Function pointer overwrites - Overwriting a function pointer in order to get code execution.
Precision Heap Spraying - Spraying the heap for reliable code execution.
Disarming EMET Mitigations to gain reliable code execution
64 and 32 Bit Windows Kernel Driver Exploitation - Exploring 32 and 64 bit kernel exploitation.
Kernel Pool Exploitation


NX/ASLR Bypass
Bypassing ASLR/NX with Ret2Libc and Named Pipes

Enhanced Mitigation Experience Toolkit - Wikipedia
https://en.wikipedia.org/wiki/Enhanced_Mitigation_Experience_Toolkit

EMET的保護
EMET經過了許多年的反覆運算，以下對它的功能作一些簡短的描述：

EMET 1.x， 發佈於 2009年10月27日
Structured Exception Handling Overwrite Protection (SEHOP)：提供對抗重寫異常處理控制碼的保護。
Dynamic Data Execution Prevention (DEP)：加強了DEP，使得一些資料類如堆和棧都不能執行。
NULL page allocation：修復間接引用空指針導致的漏洞
Heap spray allocation: 防止Heap spray攻擊。

EMET 2.x， 發佈於 2010年9月2日
Mandatory Address Space Layout Randomization (ASLR)：加強了模組位址的隨機化，即使是以前沒有使用ASLR進行編譯的模組。

Export Address Table Access Filtering (EAF)：
普通的shellcode在已載入的模組匯出的函數中反覆運算，來解析關鍵Windows API。
這些通常由kernel32.dll, ntdll.dll和kernelbase.dll匯出。
EMET使用保存在debug註冊器（比如DR0）的硬體中斷點來停止那些嘗試讀取這些模組的匯出表的動作，並且讓EMET驗證它是否合法。

EMET 3.x， 發佈於 2012年5月25日
從ROPGuard中導入了用於對抗ROP的策略。
導入庫時的檢查：防止從UNC路徑中導入DLL。
ROP 策略 - 記憶體保護檢查：保護關鍵Windows API，類似VirtualProtect，會使得棧被標記為可執行。
ROP 策略 - 調用檢查：防止關鍵Windows API被通過返回或跳出命令執行；
ROP 策略 - Stack Pivot：檢測是否被進行Stack Pivot攻擊。
ROP 策略 - 模擬執行流：通過手動操作棧註冊器來模擬執行，以此檢查它是否在沒有使用調用命令的情況下調用了Windows API。這被認為是EMET在探測ROP程式。
仔細設計ASLR：在已載入的模組位址上增加了隨機的8位熵。

EMET 4.x， 發佈於 2013年4月18日
Deep Hooks:當這個特性開啟，EMET會把所有等級的Windows API都hook上。

抗繞過：因為EMET在已經hook的Windows API函數頭部放了一個跳出命令，攻擊者能夠構造一個ROP，能夠返回跳出命令之後的代碼上。這項保護嘗試阻止這一繞過。

禁用函數：默認禁止調用ntdll!LdrHotpatchRoutine函數來防止DEP/ASLR被繞過。也可以添加其他函數。

認證信任：在認證鏈信任檢測步驟，提供更多的檢查和驗證。一般這只支援IE。

EMET 5.x， 發佈於 2014年7月31日
加入Attack Surface Reduction (ASR)：允許添加配置清單來進制特定的應用不允許載入某些模組。

EAF+：類似EAF，它能保護關鍵模組匯出表如kernel32.dll, ntdll.dll和kernelbase.dll。它同時也能探測棧指標是否指向棧外部的某處，或者frame和棧的指針是否一致。





利用EMET漏洞來禁用EMET保護
通過EMET來禁用EMET——EMET的禁用與繞過思路講解- 雪地
https://yinzo.github.io/14590503922928.html

微軟的Enhanced Mitigation Experience Toolkit (EMET)是一項提高程式安全性的專案。
它通過動態連結程式庫(DLL)來運行在『受保護』的程式中，並且做一些修改來使得破解更加困難。

我們已經見過很多次EMET在過去的研究或者攻擊中被繞過了[2, 3, 4, 5, 6, 7, 8]。
通常來說，微軟都是通過修改或者增加一些安全設計來搞定現有的繞過問題。 
EMET的設計目的是使得破解行為的成本升高，而不是一個『傻瓜式的防破解方案』[1]。
所以，只要擁有在進程空間中讀寫的能力，理論上我們就能搞定所有的安全設計[2]。

如果一個攻擊者能夠毫不費力地繞過EMET，那這就完全打破了EMET提高破解成本的最初目的。
我們在新技術那段展示了一種禁用EMET的技術。微軟在EMET5.5中打了個補丁來解決這個問題。


Disarming EMET Mitigations to gain reliable code execution
New EMET research: EMET 5.52 can be bypassed 
https://www.blackhat.com/docs/us-16/materials/us-16-Alsaheel-Using-EMET-To-Disable-EMET.pdf
